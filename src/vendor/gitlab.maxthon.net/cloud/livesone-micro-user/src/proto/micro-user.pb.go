// Code generated by protoc-gen-go. DO NOT EDIT.
// source: micro-user.proto

package microuser

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	RegisterUser(ctx context.Context, in *RegUserInfo, opts ...grpc.CallOption) (*ResMsg, error)
	SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*ResMsg, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error)
	GetUserAllInfo(ctx context.Context, in *GetUserAllInfoReq, opts ...grpc.CallOption) (*GetUserAllInfoRes, error)
	UserActive(ctx context.Context, in *UserActiveReq, opts ...grpc.CallOption) (*ResMsg, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUser(ctx context.Context, in *RegUserInfo, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/microuser.UserService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/microuser.UserService/SetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error) {
	out := new(GetUserInfoRes)
	err := c.cc.Invoke(ctx, "/microuser.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAllInfo(ctx context.Context, in *GetUserAllInfoReq, opts ...grpc.CallOption) (*GetUserAllInfoRes, error) {
	out := new(GetUserAllInfoRes)
	err := c.cc.Invoke(ctx, "/microuser.UserService/GetUserAllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserActive(ctx context.Context, in *UserActiveReq, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/microuser.UserService/UserActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	RegisterUser(context.Context, *RegUserInfo) (*ResMsg, error)
	SetUserInfo(context.Context, *SetUserInfoReq) (*ResMsg, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error)
	GetUserAllInfo(context.Context, *GetUserAllInfoReq) (*GetUserAllInfoRes, error)
	UserActive(context.Context, *UserActiveReq) (*ResMsg, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUser(ctx, req.(*RegUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserService/SetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUserInfo(ctx, req.(*SetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserService/GetUserAllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAllInfo(ctx, req.(*GetUserAllInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserService/UserActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserActive(ctx, req.(*UserActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microuser.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserService_RegisterUser_Handler,
		},
		{
			MethodName: "SetUserInfo",
			Handler:    _UserService_SetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserAllInfo",
			Handler:    _UserService_GetUserAllInfo_Handler,
		},
		{
			MethodName: "UserActive",
			Handler:    _UserService_UserActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro-user.proto",
}

// UserLoginServiceClient is the client API for UserLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserLoginServiceClient interface {
	Login(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserRes, error)
	AutoLogin(ctx context.Context, in *AutoLoginReq, opts ...grpc.CallOption) (*AutoLoginRes, error)
	Logout(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*ResMsg, error)
	GetLoginInfo(ctx context.Context, in *GetLoginInfoReq, opts ...grpc.CallOption) (*GetLoginInfoRes, error)
}

type userLoginServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserLoginServiceClient(cc *grpc.ClientConn) UserLoginServiceClient {
	return &userLoginServiceClient{cc}
}

func (c *userLoginServiceClient) Login(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserRes, error) {
	out := new(LoginUserRes)
	err := c.cc.Invoke(ctx, "/microuser.UserLoginService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginServiceClient) AutoLogin(ctx context.Context, in *AutoLoginReq, opts ...grpc.CallOption) (*AutoLoginRes, error) {
	out := new(AutoLoginRes)
	err := c.cc.Invoke(ctx, "/microuser.UserLoginService/AutoLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginServiceClient) Logout(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/microuser.UserLoginService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginServiceClient) GetLoginInfo(ctx context.Context, in *GetLoginInfoReq, opts ...grpc.CallOption) (*GetLoginInfoRes, error) {
	out := new(GetLoginInfoRes)
	err := c.cc.Invoke(ctx, "/microuser.UserLoginService/GetLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLoginServiceServer is the server API for UserLoginService service.
type UserLoginServiceServer interface {
	Login(context.Context, *LoginUserReq) (*LoginUserRes, error)
	AutoLogin(context.Context, *AutoLoginReq) (*AutoLoginRes, error)
	Logout(context.Context, *TokenReq) (*ResMsg, error)
	GetLoginInfo(context.Context, *GetLoginInfoReq) (*GetLoginInfoRes, error)
}

func RegisterUserLoginServiceServer(s *grpc.Server, srv UserLoginServiceServer) {
	s.RegisterService(&_UserLoginService_serviceDesc, srv)
}

func _UserLoginService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserLoginService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServiceServer).Login(ctx, req.(*LoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLoginService_AutoLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServiceServer).AutoLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserLoginService/AutoLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServiceServer).AutoLogin(ctx, req.(*AutoLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLoginService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserLoginService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServiceServer).Logout(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLoginService_GetLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServiceServer).GetLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserLoginService/GetLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServiceServer).GetLoginInfo(ctx, req.(*GetLoginInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserLoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microuser.UserLoginService",
	HandlerType: (*UserLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserLoginService_Login_Handler,
		},
		{
			MethodName: "AutoLogin",
			Handler:    _UserLoginService_AutoLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserLoginService_Logout_Handler,
		},
		{
			MethodName: "GetLoginInfo",
			Handler:    _UserLoginService_GetLoginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro-user.proto",
}

// UserWalletServiceClient is the client API for UserWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserWalletServiceClient interface {
	BindWallet(ctx context.Context, in *WalletBindReq, opts ...grpc.CallOption) (*ResMsg, error)
	QueryWallet(ctx context.Context, in *WalletQueryReq, opts ...grpc.CallOption) (*WalletQueryRes, error)
}

type userWalletServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserWalletServiceClient(cc *grpc.ClientConn) UserWalletServiceClient {
	return &userWalletServiceClient{cc}
}

func (c *userWalletServiceClient) BindWallet(ctx context.Context, in *WalletBindReq, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/microuser.UserWalletService/BindWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) QueryWallet(ctx context.Context, in *WalletQueryReq, opts ...grpc.CallOption) (*WalletQueryRes, error) {
	out := new(WalletQueryRes)
	err := c.cc.Invoke(ctx, "/microuser.UserWalletService/QueryWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWalletServiceServer is the server API for UserWalletService service.
type UserWalletServiceServer interface {
	BindWallet(context.Context, *WalletBindReq) (*ResMsg, error)
	QueryWallet(context.Context, *WalletQueryReq) (*WalletQueryRes, error)
}

func RegisterUserWalletServiceServer(s *grpc.Server, srv UserWalletServiceServer) {
	s.RegisterService(&_UserWalletService_serviceDesc, srv)
}

func _UserWalletService_BindWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).BindWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserWalletService/BindWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).BindWallet(ctx, req.(*WalletBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_QueryWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).QueryWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microuser.UserWalletService/QueryWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).QueryWallet(ctx, req.(*WalletQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserWalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microuser.UserWalletService",
	HandlerType: (*UserWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindWallet",
			Handler:    _UserWalletService_BindWallet_Handler,
		},
		{
			MethodName: "QueryWallet",
			Handler:    _UserWalletService_QueryWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro-user.proto",
}

func init() { proto.RegisterFile("micro-user.proto", fileDescriptor_micro_user_a619196027ea1464) }

var fileDescriptor_micro_user_a619196027ea1464 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xfb, 0x0d, 0xbe, 0xc1, 0xce, 0x86, 0x6c, 0x11, 0x74, 0x1b, 0x5e, 0xf5, 0x7e, 0xbb,
	0xa8, 0x97, 0x43, 0x64, 0x82, 0x4c, 0x61, 0x0a, 0x6e, 0x8a, 0xd7, 0x73, 0x1e, 0x43, 0xb0, 0x6b,
	0x34, 0x49, 0x07, 0xfe, 0x09, 0x6f, 0xfd, 0x75, 0xfe, 0x17, 0x39, 0x69, 0x6d, 0xd3, 0xd5, 0xec,
	0xb2, 0xcf, 0xf3, 0x9e, 0x97, 0xe6, 0x34, 0x85, 0xee, 0x46, 0xac, 0x95, 0x1c, 0xa5, 0x1a, 0xd5,
	0xf8, 0x4d, 0x49, 0x23, 0x59, 0xcb, 0x12, 0x02, 0xc3, 0x7e, 0x29, 0x47, 0x1b, 0xd4, 0x7a, 0xc5,
	0x31, 0x0b, 0x45, 0xdf, 0x0d, 0x68, 0x3f, 0x68, 0x54, 0x4b, 0x54, 0x5b, 0xb1, 0x46, 0x36, 0x81,
	0xce, 0x02, 0xb9, 0xd0, 0x06, 0x15, 0x61, 0x76, 0x34, 0x2e, 0x5a, 0xc6, 0x0b, 0xe4, 0xc4, 0xae,
	0x93, 0x17, 0x39, 0xec, 0x55, 0xb8, 0xbe, 0xd1, 0x3c, 0x0c, 0xd8, 0x19, 0xb4, 0x97, 0x68, 0x7e,
	0x33, 0x6c, 0xe0, 0x64, 0x1c, 0xbe, 0xc0, 0xf7, 0xbf, 0xc7, 0x2f, 0xa1, 0x3d, 0xf3, 0x8c, 0xcf,
	0xaa, 0xe3, 0x5e, 0xa5, 0xc3, 0x80, 0xdd, 0xc2, 0x41, 0xce, 0xa6, 0x71, 0x6c, 0x9b, 0x4e, 0xea,
	0xf1, 0x5c, 0x51, 0xd9, 0x3e, 0x4b, 0x7d, 0x13, 0x00, 0xcb, 0xd6, 0x46, 0x6c, 0x91, 0xf5, 0x9d,
	0x74, 0x89, 0x7d, 0x67, 0x8a, 0x3e, 0x1b, 0xd0, 0xa5, 0xd8, 0x5c, 0x72, 0x91, 0x94, 0x4b, 0xfe,
	0x6f, 0x9f, 0xd9, 0xb1, 0x33, 0x62, 0x09, 0x45, 0xa9, 0xcb, 0x23, 0xe8, 0x75, 0xce, 0xa1, 0x35,
	0x4d, 0x8d, 0xac, 0x17, 0x14, 0x74, 0xb7, 0xc0, 0x11, 0x54, 0x10, 0x41, 0x73, 0x2e, 0xb9, 0x4c,
	0x0d, 0x3b, 0x74, 0x42, 0xf7, 0xf2, 0x15, 0x13, 0xef, 0xa7, 0xb9, 0x82, 0xce, 0x0c, 0x8d, 0x2d,
	0xb1, 0x1b, 0x1d, 0x56, 0x77, 0x56, 0x08, 0x2a, 0xf0, 0x3b, 0x1d, 0x06, 0xd1, 0xd7, 0x3f, 0xe8,
	0xd1, 0x61, 0x1e, 0x57, 0x71, 0x8c, 0xa6, 0xdc, 0x08, 0x5c, 0x88, 0xe4, 0x39, 0x83, 0x95, 0x1d,
	0x67, 0x88, 0xe4, 0xbe, 0x7b, 0x73, 0x97, 0xa2, 0xfa, 0xc8, 0xa7, 0x07, 0xb5, 0x69, 0x6b, 0x77,
	0xef, 0x4d, 0x45, 0xe9, 0x30, 0x78, 0x6a, 0xda, 0x3f, 0xe2, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0x5f, 0x33, 0x32, 0x4a, 0x03, 0x00, 0x00,
}
